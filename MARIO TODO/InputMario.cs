//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputMario.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMario : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMario()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMario"",
    ""maps"": [
        {
            ""name"": ""actionMovimiento"",
            ""id"": ""53d3bd3a-f3ef-4e4e-bd61-8ba6873d80f8"",
            ""actions"": [
                {
                    ""name"": ""andar"",
                    ""type"": ""Value"",
                    ""id"": ""ec19f759-54dc-4f60-a593-936390a162d6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone(min=0.45)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""corre"",
                    ""type"": ""Button"",
                    ""id"": ""099c57db-e2f2-4b39-a84b-8c9595b1fc5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""salto"",
                    ""type"": ""Button"",
                    ""id"": ""2a257ce8-dcb2-4a64-8ab8-4b407d0622cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a678f7e2-d878-42e5-b201-b8fe9d19fb21"",
                    ""path"": ""<DualShockGamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""andar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3858f68-b35c-4b04-9e7f-70c6f96eac82"",
                    ""path"": ""<DualShockGamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""corre"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f991153f-eadd-4474-aae5-ff9a36b4554d"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""salto"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // actionMovimiento
        m_actionMovimiento = asset.FindActionMap("actionMovimiento", throwIfNotFound: true);
        m_actionMovimiento_andar = m_actionMovimiento.FindAction("andar", throwIfNotFound: true);
        m_actionMovimiento_corre = m_actionMovimiento.FindAction("corre", throwIfNotFound: true);
        m_actionMovimiento_salto = m_actionMovimiento.FindAction("salto", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // actionMovimiento
    private readonly InputActionMap m_actionMovimiento;
    private IActionMovimientoActions m_ActionMovimientoActionsCallbackInterface;
    private readonly InputAction m_actionMovimiento_andar;
    private readonly InputAction m_actionMovimiento_corre;
    private readonly InputAction m_actionMovimiento_salto;
    public struct ActionMovimientoActions
    {
        private @InputMario m_Wrapper;
        public ActionMovimientoActions(@InputMario wrapper) { m_Wrapper = wrapper; }
        public InputAction @andar => m_Wrapper.m_actionMovimiento_andar;
        public InputAction @corre => m_Wrapper.m_actionMovimiento_corre;
        public InputAction @salto => m_Wrapper.m_actionMovimiento_salto;
        public InputActionMap Get() { return m_Wrapper.m_actionMovimiento; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionMovimientoActions set) { return set.Get(); }
        public void SetCallbacks(IActionMovimientoActions instance)
        {
            if (m_Wrapper.m_ActionMovimientoActionsCallbackInterface != null)
            {
                @andar.started -= m_Wrapper.m_ActionMovimientoActionsCallbackInterface.OnAndar;
                @andar.performed -= m_Wrapper.m_ActionMovimientoActionsCallbackInterface.OnAndar;
                @andar.canceled -= m_Wrapper.m_ActionMovimientoActionsCallbackInterface.OnAndar;
                @corre.started -= m_Wrapper.m_ActionMovimientoActionsCallbackInterface.OnCorre;
                @corre.performed -= m_Wrapper.m_ActionMovimientoActionsCallbackInterface.OnCorre;
                @corre.canceled -= m_Wrapper.m_ActionMovimientoActionsCallbackInterface.OnCorre;
                @salto.started -= m_Wrapper.m_ActionMovimientoActionsCallbackInterface.OnSalto;
                @salto.performed -= m_Wrapper.m_ActionMovimientoActionsCallbackInterface.OnSalto;
                @salto.canceled -= m_Wrapper.m_ActionMovimientoActionsCallbackInterface.OnSalto;
            }
            m_Wrapper.m_ActionMovimientoActionsCallbackInterface = instance;
            if (instance != null)
            {
                @andar.started += instance.OnAndar;
                @andar.performed += instance.OnAndar;
                @andar.canceled += instance.OnAndar;
                @corre.started += instance.OnCorre;
                @corre.performed += instance.OnCorre;
                @corre.canceled += instance.OnCorre;
                @salto.started += instance.OnSalto;
                @salto.performed += instance.OnSalto;
                @salto.canceled += instance.OnSalto;
            }
        }
    }
    public ActionMovimientoActions @actionMovimiento => new ActionMovimientoActions(this);
    public interface IActionMovimientoActions
    {
        void OnAndar(InputAction.CallbackContext context);
        void OnCorre(InputAction.CallbackContext context);
        void OnSalto(InputAction.CallbackContext context);
    }
}
